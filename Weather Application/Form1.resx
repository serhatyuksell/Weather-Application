<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        gM6g2oIQ7AWcYQhWM//Z
</value>
  </data>
</root>